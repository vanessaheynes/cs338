# Ruben Boero, Vanessa Heynes, Kai Weiner

# Private Key

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

3)
From RFC 8017:

         RSAPrivateKey ::= SEQUENCE {
             version           Version,
             modulus           INTEGER,  -- n
             publicExponent    INTEGER,  -- e
             privateExponent   INTEGER,  -- d
             prime1            INTEGER,  -- p
             prime2            INTEGER,  -- q
             exponent1         INTEGER,  -- d mod (p-1)
             exponent2         INTEGER,  -- d mod (q-1)
             coefficient       INTEGER,  -- (inverse of q) mod p
             otherPrimeInfos   OtherPrimeInfos OPTIONAL
         }

   The fields of type RSAPrivateKey have the following meanings:

   o  version is the version number, for compatibility with future
      revisions of this document.  It SHALL be 0 for this version of the
      document, unless multi-prime is used; in which case, it SHALL be
      1.

            Version ::= INTEGER { two-prime(0), multi(1) }
               (CONSTRAINED BY
               {-- version must be multi if otherPrimeInfos present --})

   o  modulus is the RSA modulus n.

   o  publicExponent is the RSA public exponent e.

   o  privateExponent is the RSA private exponent d.

   o  prime1 is the prime factor p of n.

   o  prime2 is the prime factor q of n.

   o  exponent1 is d mod (p - 1).

   o  exponent2 is d mod (q - 1).

   o  coefficient is the CRT coefficient q^(-1) mod p.

4)
When we used Lapo Luchino's decoder, we copy-pasted our RSA key into the correct area and hit decode. When we used Michael Holtstrom's decoder, we removed the RSA header and footer, then decoded the file.	


5)
1st integer:
	Name of the integer: version
	Value of the integer: 0x00
	Starting index: 4
	DER Encoding: 
		0x02 = 0b00000010: 
			[00|0|00010]
			First section (class) = 0 -> universal
			Second section (P/C value) = 0 -> primitive
			Third section (primitive type) = 2 -> INTEGER
		0x01 = 0b00000001:
			[0|0000001]
			First section (length form) = 0 -> definite, short
			Second section (length octet) = 1 ->  1 byte of information
			

2nd integer:
	Name of the integer: modulus (n)
	Value of the integer: 0x00d1bec793c52efd2fddfe39f744138a645787ad2ec5fc03e8f80244c40d4c021d3034461a2048304e58d434b14b1d7175b029c39dc96039a22798d32cf83853ecb5d7b9f9a31fedd2a159c19f23743c8f026d2350ce54d25d7b5d187421c3d6ca5aa0ba89121995ab119dcde86e42e5d031f97064dfdf02c21c9cdcc023f0fb8e7c3e433ce319dc8b4aa5225c3630f433525e8b428e61b99d5e3af06df4690e4636b4fa8e43e1fb3990adf39ccb636eb4ee768cb7b5edadf025be0c715c80c79062cac971fd6bc60cd6d1e57df1f205710ec5e90678412166b4229704ecc5254ea75e11562c2e8e30221be77d0794b5f677cfc9aeeec5f0ea7ccf424a05eca9d92b8a96450890614449d80200d23b173bf3a9af920d9400654068a77375a8fad73d6ba098eb62783903a3b0b70f559b840aa990915f6e25db6ef51c731fe2797c2de58420e933f5ea7d56a66b493c108fdfb848696251a91426435fea3a6b66cc6b8825195f851e8323ed0527e188c720d7f85a6290f0ea850510e604533d7c49
	Starting index: 7
	DER Encoding:
		0x02 = 0b00000010:
			[00|0|00010]
			First section (class) = 0 -> universal
			Second section (P/C value) = 0 -> primitive
			Third section (primitive type) = 2 -> INTEGER
			
		0x82 = 0b10000010:
			[1|0000010]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 2 -> 2 bytes specifying the length 				of the information to come
		
		0x0181 = 0b1110000101:
			1110000101 = 385 -> 385 bytes of information in the payload

Third integer:
	Name of integer: public exponent (e)
	Value of the integer: 0x10001
	Starting index: 396
	DER encoding: 
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER

		0x03 = 0b00000011:
		[0|0000011]
		First section (length form) = 0 -> definite, short
		Second section (length octet) = 3 ->  3 bytes of information

Fourth integer:
	Name of the integer: private exponent (d)
	Value of the integer: 
0x15004737728cebe8f90f557a7ea47e3ce1cec1f666f87ee3bac16f6539f79c5693d70815e19998cc9f744ffa588d10293a845403de7ff6055875a2df63d3300409891a23f6c361aaaf612f53e1d6e7a1621acf686de06c57d3dc54707c59018ead585e950eece4e1861808dff6fa57cc6ad490fe68b409b0a9f0c2e1b23794d885742e835031ecb53dba1f20a084724f193642375dce47298c9fd6270c4be094033247cc2adbdbadbde0ccfdac17bea3fb247f9e7d66d8fdaca9c4d12cf3f007447c2cf400d8e6b197e02f4c3caeba09a9adb824ae88a800e703cfb33594814855fbb9b2bee240cbca987da733bf710c6eb2ebae2ad3568ef9961c86466a70bf223c68d103904eb138652cfd88defd54503265016124cda4ff318c435907ac8c53d415c2b5f46878f44de0122f8a1926603058bd59431925688c0c244164dafc4bcc9a03891330a912774d79c3fbfcb9ecfe3271ad87c0a9d9a3ee0637eb980a96556b6b45e9e0a869703cb6b53d9184d08a149382987ccfd3caccca154c59a1
	Starting index: 401
	DER encoding:
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x82 = 0b10000010:
			[1|0000010]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 2 -> 2 bytes specifying the length 				of the information to come
		
		0x0180 = 0b110000000:
			110000000 = 384 -> 384 bytes of information in the payload

Fifth integer:
	Name of the integer: prime1 (the prime factor p of n)
	Value of the integer:
0x00f76bfc9d190632bf2f80e6eb3a0af462dc915c0430a81f13d291192a02b21e141da755f3a513da71d8825d857422c2b9dcd0a245c955c25a2853e5123ab7cd03be8ed2575f86ce48196e9fd841716a8709da6bc435dca21fbe38790449cf9d72f8ec46d74559430858bbe239b85d2812b3482a601ba8b95b9223271a8724bc6b3629bc49d69e90bd06c86622c8fd8d9b352683fc7f72d55eb70dd1ec5aa176e05131161c8e1acb69c63dfc10f6357a8a0e0818905421f7a8c101ae5e9c5f07a5
	Starting index: 789
	DER encoding: 
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x81 = 0b10000001:
			[1|0000001]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 1 -> 1 byte specifying the length 				of the information to come
		
		0xC1 = 0b11000001 = 193 -> 193 bytes of information in the payload 
 
Sixth integer:
	Name of the integer: prime2 (the prime factor q of n)
	Value of the integer:
0x00d904641d76949079a330917a4c1ccc38e308b52d16c7a5a5b4353cf9ff12fe9cf4c2fe8bc7bf80de8919e15df7d69241afdac78db860e9bbc8c65781cd84f2ee6ef3b00df2a435af86b11cc43b188cd258e3bd105069efcbc1c1e00fee2b62b2830eb2d476b58c5e701eccb151cf4e0cdef5b04002ea3c56996d836af35ce50c5568112da34aa858cd121d99332a467d6084d64c45d40d4e81f19ba3e9dc82364a3f454414b4bcf7bbc1ad738964ab4be1ef6eef877a788143e100fed0c1a0d5
	Starting index: 985
	Der encoding: 
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x81 = 0b10000001:
			[1|0000001]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 1 -> 1 byte specifying the length 				of the information to come
		
		0xC1 = 0b11000001 = 193 -> 193 bytes of information in the payload 

Seventh integer:
	Name of the integer: exponent1 (d mod (p - 1))
	Value of the integer:
0x009621e18416062bced4ed5bb18a63d14d17d7e044ee9d65562ae43ea7be41047d624d029bb82466ddc3e9bf03d6a7ad0f08cd545a1244468d5c8123b3bf0b7e8c7219c9ca98bd7cf844ee5a71e7ac015ef57ca2fdc94d1ad7361ea05818cdb1156db4397c30a96c42694d808553b8bb3335b4697a2dee60a30ef6e3a8762eb5623cd8705741b2afd2f385b06c1517bdd05b1d06e3b5162220b9e4d9e7984af78e3fd6103bbd82c6c1653881766d5f9ffe9b6b1034abc87cb5da7fc1a5c92ee4bd
	Starting index: 1181
	DER encoding: 
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x81 = 0b10000001:
			[1|0000001]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 1 -> 1 byte specifying the length 				of the information to come
		
		0xC1 = 0b11000001 = 193 -> 193 bytes of information in the payload 

Eighth integer
	Name of the integer: exponent2 (d mod (q - 1))
	Value of the integer:
0x008732511c79cf3be24b63ea7d82053ec501cb5ef36409a48c82a3d804f67f62d76d343d57df6cd25fd091aaf0db8175442ec5e123cd05b31725914adab6aa689d59c9be9831dd5304b2a88bff43c19b993f7f413d749b4aa46964daad91f6bd59f083abace8f759274c3a23d323e03e038eb308c6180acce436591f51f5a29d9efd6603ada6d8cfdfe281b2a6ca553fecc3c07db0ae9fd85a5c61a4508d54ae5a1c0f269baf3a99aecbed709d55aebd785c9cc943b7e6f843af81f118cdfc92b1
	Starting index: 1377
	DER encoding:
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x81 = 0b10000001:
			[1|0000001]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 1 -> 1 byte specifying the length 				of the information to come
		
		0xC1 = 0b11000001 = 193 -> 193 bytes of information in the payload 

Ninth integer:
	Name of the integer: coefficient (the CRT coefficient q^(-1) mod p)
	Value of the integer:
0x0a1efe5a6a351acf0d2cc02399adcdd7c682645f5c95ffda30f447ae1a2cc99787e9800bc302111a9086ad4a878a631694507f594a368fb1d88c2c49e5ca20931e3470b826573c74e9133573fe2d623dcb2c0bea2e7022cc4452ceaf3f663ed7950964bc2ab0007fce788a30273d54e77a97e65983230199275ff2f6607859421fa5a045bc88b6deeb7836360675f2dddc11553189eaf51866e1a93c4c88f656c84f357d5b8b211729945678f22588999fb2a644edb1469916545b1f78d36b54
	Starting index: 1573
	DER encoding:
		0x02 = 0b00000010:
		[00|0|00010]
		First section (class) = 0 -> universal
		Second section (P/C value) = 0 -> primitive
		Third section (primitive type) = 2 -> INTEGER
		
		0x81 = 0b10000001:
			[1|0000001]
			First section (length form) = 1 -> definite, long
			Second section (length form) = 1 -> 1 byte specifying the length 				of the information to come
		
		0xC0 = 0b11000000 = 192 -> 192 bytes of information in the payload 	


# Public Key

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDRvseTxS79L93+OfdEE4pkV4etLsX8A+j4AkTEDUwCHTA0RhogSDBOWNQ0sUsdcXWwKcOdyWA5oieY0yz4OFPstde5+aMf7dKhWcGfI3Q8jwJtI1DOVNJde10YdCHD1spaoLqJEhmVqxGdzehuQuXQMflwZN/fAsIcnNzAI/D7jnw+QzzjGdyLSqUiXDYw9DNSXotCjmG5nV468G30aQ5GNrT6jkPh+zmQrfOcy2NutO52jLe17a3wJb4McVyAx5Biyslx/WvGDNbR5X3x8gVxDsXpBnhBIWa0IpcE7MUlTqdeEVYsLo4wIhvnfQeUtfZ3z8mu7sXw6nzPQkoF7KnZK4qWRQiQYURJ2AIA0jsXO/Opr5INlABlQGinc3Wo+tc9a6CY62J4OQOjsLcPVZuECqmQkV9uJdtu9RxzH+J5fC3lhCDpM/XqfVama0k8EI/fuEhpYlGpFCZDX+o6a2bMa4glGV+FHoMj7QUn4YjHINf4WmKQ8OqFBRDmBFM9fEk= heynesk@mantis

7)
We expect to find this in the public key (straight from RFC 8017)
         RSAPublicKey ::= SEQUENCE {
             modulus           INTEGER,  -- n
             publicExponent    INTEGER   -- e
         }

To decode the public key we ran:
[public key] | cut -d " " -f2 | \ base64 -d | hexdump -ve '/1 "%02x "' -e '2/8 "\n"'

^ We used the command on the linked blog post (https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/).



Output:
00 00 00 07                                     | 7 -> the payload will be 7 bytes long
73 73 68 2d 72 73 61                            | string "ssh-rsa" (the key format)
----------------------------------------------------------------------------------------------------
00 00 00 03                                     | 3 -> the payload will be 3 bytes long
01 00 01                                        | e (the common e value)
----------------------------------------------------------------------------------------------------
00 00 01 81                                     | 385 -> the payload will be 385 bytes long
----------------------------------------------------------------------------------------------------
00 d1 be c7 93 c5 2e fd 2f dd                   | n start
fe 39 f7 44 13 8a 64 57 87 ad 2e c5 fc 03 e8 f8 |
02 44 c4 0d 4c 02 1d 30 34 46 1a 20 48 30 4e 58 |
d4 34 b1 4b 1d 71 75 b0 29 c3 9d c9 60 39 a2 27 |
98 d3 2c f8 38 53 ec b5 d7 b9 f9 a3 1f ed d2 a1 |
59 c1 9f 23 74 3c 8f 02 6d 23 50 ce 54 d2 5d 7b |
5d 18 74 21 c3 d6 ca 5a a0 ba 89 12 19 95 ab 11 |
9d cd e8 6e 42 e5 d0 31 f9 70 64 df df 02 c2 1c |
9c dc c0 23 f0 fb 8e 7c 3e 43 3c e3 19 dc 8b 4a |
a5 22 5c 36 30 f4 33 52 5e 8b 42 8e 61 b9 9d 5e |
3a f0 6d f4 69 0e 46 36 b4 fa 8e 43 e1 fb 39 90 |
ad f3 9c cb 63 6e b4 ee 76 8c b7 b5 ed ad f0 25 |
be 0c 71 5c 80 c7 90 62 ca c9 71 fd 6b c6 0c d6 |
d1 e5 7d f1 f2 05 71 0e c5 e9 06 78 41 21 66 b4 | 
22 97 04 ec c5 25 4e a7 5e 11 56 2c 2e 8e 30 22 |
1b e7 7d 07 94 b5 f6 77 cf c9 ae ee c5 f0 ea 7c |
cf 42 4a 05 ec a9 d9 2b 8a 96 45 08 90 61 44 49 |
d8 02 00 d2 3b 17 3b f3 a9 af 92 0d 94 00 65 40 |
68 a7 73 75 a8 fa d7 3d 6b a0 98 eb 62 78 39 03 |
a3 b0 b7 0f 55 9b 84 0a a9 90 91 5f 6e 25 db 6e |
f5 1c 73 1f e2 79 7c 2d e5 84 20 e9 33 f5 ea 7d |
56 a6 6b 49 3c 10 8f df b8 48 69 62 51 a9 14 26 |
43 5f ea 3a 6b 66 cc 6b 88 25 19 5f 85 1e 83 23 |
ed 05 27 e1 88 c7 20 d7 f8 5a 62 90 f0 ea 85 05 | 
10 e6 04 53 3d 7c 49                            | n end

Value of e:
65537

Value of n: 1221708862085989949110094750409913781071043161746737403220741042723596952435436689523581047825085229363101929737215604254102778725855429575636687245165135180428011676976688831602823321570346732084570341026922837040043126643301566085877422327779795835845938982740271184323122574120602237868286536314954537237457929587438795957488870226270415685374340511764064587989638734491279627510169408177444023268181929998150532534202855581419140327757580103338122827340296795056339393246162721134593093479765062874288170749084876398734604593567544037073166744682590154387394407037341485393365329086125141796182223218649644757167860227460988751235218257152281690401672110896228355519876753897509559470059389855246328667002328798549808994195676134163027637436398129236312039105211302295279310122389886036892130836496629322917749766888436504737904495991142983185492472366367684156725661015450823013743920938505677405257


# Sanity Check
Checking that p*q = n:

Running this python code demonstrates that p*q = n
p = 0xf76bfc9d190632bf2f80e6eb3a0af462dc915c0430a81f13d291192a02b21e141da755f3a513da71d8825d857422c2b9dcd0a245c955c25a2853e5123ab7cd03be8ed2575f86ce48196e9fd841716a8709da6bc435dca21fbe38790449cf9d72f8ec46d74559430858bbe239b85d2812b3482a601ba8b95b9223271a8724bc6b3629bc49d69e90bd06c86622c8fd8d9b352683fc7f72d55eb70dd1ec5aa176e05131161c8e1acb69c63dfc10f6357a8a0e0818905421f7a8c101ae5e9c5f07a5
q = 0xd904641d76949079a330917a4c1ccc38e308b52d16c7a5a5b4353cf9ff12fe9cf4c2fe8bc7bf80de8919e15df7d69241afdac78db860e9bbc8c65781cd84f2ee6ef3b00df2a435af86b11cc43b188cd258e3bd105069efcbc1c1e00fee2b62b2830eb2d476b58c5e701eccb151cf4e0cdef5b04002ea3c56996d836af35ce50c5568112da34aa858cd121d99332a467d6084d64c45d40d4e81f19ba3e9dc82364a3f454414b4bcf7bbc1ad738964ab4be1ef6eef877a788143e100fed0c1a0d5
n = 0xd1bec793c52efd2fddfe39f744138a645787ad2ec5fc03e8f80244c40d4c021d3034461a2048304e58d434b14b1d7175b029c39dc96039a22798d32cf83853ecb5d7b9f9a31fedd2a159c19f23743c8f026d2350ce54d25d7b5d187421c3d6ca5aa0ba89121995ab119dcde86e42e5d031f97064dfdf02c21c9cdcc023f0fb8e7c3e433ce319dc8b4aa5225c3630f433525e8b428e61b99d5e3af06df4690e4636b4fa8e43e1fb3990adf39ccb636eb4ee768cb7b5edadf025be0c715c80c79062cac971fd6bc60cd6d1e57df1f205710ec5e90678412166b4229704ecc5254ea75e11562c2e8e30221be77d0794b5f677cfc9aeeec5f0ea7ccf424a05eca9d92b8a96450890614449d80200d23b173bf3a9af920d9400654068a77375a8fad73d6ba098eb62783903a3b0b70f559b840aa990915f6e25db6ef51c731fe2797c2de58420e933f5ea7d56a66b493c108fdfb848696251a91426435fea3a6b66cc6b8825195f851e8323ed0527e188c720d7f85a6290f0ea850510e604533d7c49

if (p*q == n):
    print("true!")

Checkling that e*d mod lambda(n) = 1:

The following python code results in a print statement of 1:
	import math
	
	d = 0x15004737728cebe8f90f557a7ea47e3ce1cec1f666f87ee3bac16f6539f79c5693d70815e19998cc9f744ffa588d10293a845403de7ff6055875a2df63d3300409891a23f6c361aaaf612f53e1d6e7a1621acf686de06c57d3dc54707c59018ead585e950eece4e1861808dff6fa57cc6ad490fe68b409b0a9f0c2e1b23794d885742e835031ecb53dba1f20a084724f193642375dce47298c9fd6270c4be094033247cc2adbdbadbde0ccfdac17bea3fb247f9e7d66d8fdaca9c4d12cf3f007447c2cf400d8e6b197e02f4c3caeba09a9adb824ae88a800e703cfb33594814855fbb9b2bee240cbca987da733bf710c6eb2ebae2ad3568ef9961c86466a70bf223c68d103904eb138652cfd88defd54503265016124cda4ff318c435907ac8c53d415c2b5f46878f44de0122f8a1926603058bd59431925688c0c244164dafc4bcc9a03891330a912774d79c3fbfcb9ecfe3271ad87c0a9d9a3ee0637eb980a96556b6b45e9e0a869703cb6b53d9184d08a149382987ccfd3caccca154c59a1
	
	n = 0x00d1bec793c52efd2fddfe39f744138a645787ad2ec5fc03e8f80244c40d4c021d3034461a2048304e58d434b14b1d7175b029c39dc96039a22798d32cf83853ecb5d7b9f9a31fedd2a159c19f23743c8f026d2350ce54d25d7b5d187421c3d6ca5aa0ba89121995ab119dcde86e42e5d031f97064dfdf02c21c9cdcc023f0fb8e7c3e433ce319dc8b4aa5225c3630f433525e8b428e61b99d5e3af06df4690e4636b4fa8e43e1fb3990adf39ccb636eb4ee768cb7b5edadf025be0c715c80c79062cac971fd6bc60cd6d1e57df1f205710ec5e90678412166b4229704ecc5254ea75e11562c2e8e30221be77d0794b5f677cfc9aeeec5f0ea7ccf424a05eca9d92b8a96450890614449d80200d23b173bf3a9af920d9400654068a77375a8fad73d6ba098eb62783903a3b0b70f559b840aa990915f6e25db6ef51c731fe2797c2de58420e933f5ea7d56a66b493c108fdfb848696251a91426435fea3a6b66cc6b8825195f851e8323ed0527e188c720d7f85a6290f0ea850510e604533d7c49
	
	e = 0x010001
	
	p = 0x00f76bfc9d190632bf2f80e6eb3a0af462dc915c0430a81f13d291192a02b21e141da755f3a513da71d8825d857422c2b9dcd0a245c955c25a2853e5123ab7cd03be8ed2575f86ce48196e9fd841716a8709da6bc435dca21fbe38790449cf9d72f8ec46d74559430858bbe239b85d2812b3482a601ba8b95b9223271a8724bc6b3629bc49d69e90bd06c86622c8fd8d9b352683fc7f72d55eb70dd1ec5aa176e05131161c8e1acb69c63dfc10f6357a8a0e0818905421f7a8c101ae5e9c5f07a5
	
	q = 0x00d904641d76949079a330917a4c1ccc38e308b52d16c7a5a5b4353cf9ff12fe9cf4c2fe8bc7bf80de8919e15df7d69241afdac78db860e9bbc8c65781cd84f2ee6ef3b00df2a435af86b11cc43b188cd258e3bd105069efcbc1c1e00fee2b62b2830eb2d476b58c5e701eccb151cf4e0cdef5b04002ea3c56996d836af35ce50c5568112da34aa858cd121d99332a467d6084d64c45d40d4e81f19ba3e9dc82364a3f454414b4bcf7bbc1ad738964ab4be1ef6eef877a788143e100fed0c1a0d5
	
	# λ(n) = lcm(p − 1, q − 1)
	lambdaN = math.lcm(p - 1, q - 1)
	
	print(e * d % lambdaN)

Using the same p, q, and e values from the above python code, 1 < e < (p - 1) * (q - 1).