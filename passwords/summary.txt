Part 1
Total time: [user time from a "time" command]
    user    0m0.849s
Number of hashes computed: [count of the # of hashes computed] 
    267516
Passwords cracked: [number cracked]
    2734
Time per hash computed: [seconds per hash]
    0.849 seconds / 267516 hashes = 3.17e-6 seconds per hash
Time per password cracked: [seconds per password]
     0.849 seconds / 2734 passwords = 3.11e-4  seconds per password
Passwords cracked per number of hashes computed: [passwords per hash]
    2734 passwords / 267516 hashes = 0.01 passwords per hash

Part 2
Total time: [user time from a "time" command]
    user 368m55.486s
Number of hashes computed: [count of the # of hashes computed] 
    13677984530
Passwords cracked: [number cracked]
    530
Time per hash computed: [seconds per hash]
    22135.486 seconds / 13677984530 hashes = 1.62e-6 seconds per hash
Time per password cracked: [seconds per password]
    22135.486 seconds / 530 passwords = 41.77 seconds per password 
Passwords cracked per number of hashes computed: [passwords per hash]
    530 passwords / 13677984530 hashes = 3.86e-8 passwords per hash

Part 3
Total time: [user time from a "time" command]
    user	26m47.825s
Number of hashes computed: [count of the # of hashes computed] 
    2374 users * 267516 possible passwords for each user = 635082984 hashes
Passwords cracked: [number cracked]
    2734 
Time per hash computed: [seconds per hash]
    1607.825 seconds / 635082984 hashes = 2.53e-6 seconds seconds per hash 
Time per password cracked: [seconds per password]
    1607.825 / 2374 passwords = 0.68 seconds per password
Passwords cracked per number of hashes computed: [passwords per hash]
    2374 passwords / 635082984 hashes = 3.738e-6  passwords per hash 

Part 4
Which software did you use?
What commands did you issue to do your password-cracking?
How many passwords did you crack?
How long did it take?

Analysis:
- Did your time per hash computed change between phases? By what factor? Why?
    No. 
             
    phase 1: 3.17e-6 (seconds)
    phase 2: 1.62e-6 (seconds)
    phase 3: 2.53e-6 (seconds)

    It was not much more computationally difficult to compute a hash such as H(salt||password)
    thatn it is to compute H(password). We credit most of the time differences due to the fact
    that we used only 1 time for all measurements. Therefore, it's possible that the time taken
    to hash a password remained the same, but the surrounding processes could have taken a
    longer time to compute.

- Did your time per password crack change between phases? By what factor? Why?
    Yes. Phase 1 took approximately 10^5 times less time to crack each password than phases 2, and 10^3 times less time than            phase3. 

    phase 1: 3.11e-4 (seconds)
    phase 2: 41.77 (seconds)
    phase 3: 0.68 (seconds)

    Phase 1 took the least amount of time because it was the most straightforward: compute all
    hashes, then compare the stored passwords to the computed hashes. This is relatively fast
    and easy to do.

    Phase 2 took the longest because of the sheer amount of possible passwords. In the worst
    case, all 267516^2 possible passwords would need to be computed before all passwords can be
    cracked. 

    Phase 3 took a medium amount of time because it was more complex than phase 1, but not by
    much. We are still able to compute all possible hashes at once, but only for a single user.
    This means that many more hashes needed to be computed for, which in turn slowed down the 
    time to crack an individual password.

- Suppose you wanted to precompute all the hashes for each possible password
so you could just look up the password in a table indexed by the hash. How much
memory would be required for each phase?
    phase 1: enough memory to store 267516 hashes (each word in words.txt hashed) 

    phase 2: enough memory to store 267516^2 hashes (all possible combinations of 2 words
        from words.txt)

    phase 3:  enough memory to store 635082984 hashes (2374 users * 267516 possible passwords
        for each user = 635082984 hashes). This assumes that we can see the user's salt like
        we do in this assignment

- Give 3-4 reasons we should store password hashes and not the passwords themselves.
Think in terms of threats, who the attackers might be, etc.
    * If a password is both hashed and salted, the attacker needs to guess both the salt and the password to crack the password.
        This means that an attacker cannot use precomputed hash dictionaries. (An added layer of security.)
    
    * If the passwords are not hashed, the /etc/passwords file will contain a list of usernames and passwords. This means that 
        an attacker only needs to gain access to the admin password and they wil gain access to all other passwords on the device.
    
    * If passwords are stored in plain text, it's faster to brute force passwords as the hashes don't need to be computed.

    * Without hashing, it's not possible to add a salt to a password. This means that duplicate passwords can exist wherever the         passwords are stored.
